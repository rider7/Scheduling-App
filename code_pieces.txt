******************NOTES**********************
Req Questions
Do I need to display customers and appointments based on user? Or is that functionality not needed for this MVP project?




        //Establish connection before launch and assign it to the Connection reference variable named conn
        Connection conn = DBConnection.startConnection();

        //Select Statement
        String selectStatement = "SELECT * FROM countries";

        //Insert Statement
        String insertStatement = "INSERT INTO countries (Country, Create_Date, Created_By, Last_Updated_By) VALUES(?,?,?,?)"; //Question marks are placeholders to be mapped with key values in one-based index

        //Update statement
        String updateStatement = "UPDATE countries SET Country = ? WHERE Created_By = ?";

        //Delete statement
        String deleteStatement = "DELETE FROM countries WHERE country = ?";

        //Create prepared statement object for selectStatement
        Query.setPreparedStatement(conn, selectStatement);

        //Create prepared statement object for insertStatement
        //Query.setPreparedStatement(conn, insertStatement);

        //Create prepared statement object for updateStatement
        //Query.setPreparedStatement(conn, updateStatement);

        //Create prepared statement object for deleteStatement
        //Query.setPreparedStatement(conn, deleteStatement);

        //Prepared statement reference
        PreparedStatement preparedStatement = Query.getPreparedStatement();

        String Country = "Test";
        String Create_Date = "2020-03-28 00:00:00";
        String Created_By = "me";
        String Last_Updated_By = "me again";

        //Get keyboard input
//        Scanner keyboard = new Scanner(System.in);
//        System.out.println("Enter your country name: ");
//        countryName = keyboard.nextLine();

        //Key-value mapping to set the prepared statement
        //preparedStatement.setString(1,Country);
        //preparedStatement.setString(2,Create_Date);
        //preparedStatement.setString(3,Created_By);
        //preparedStatement.setString(4,Last_Updated_By);

        preparedStatement.execute(); //Execute prepared statement

        //Raw SQL Insert Statement
        //String insertStatement ="INSERT INTO countries(Country, Create_Date, Created_By, Last_Update, Last_Updated_By)" //table name countries and columns in parenthesis
        //+ "VALUES('US', '2021-02-22 00:00:00', 'admin','2021-02-22 00:00:00', 'admin')"; //Values hardcoded to insert into the table
                /*
                //Variable Insert Statement
                String Country = "Canada";
                String Create_Date = "2021-02-22 00:00:00";
                String Created_By = "admin";
                String Last_Update = "2021-02-22 00:00:00";
                String Last_Updated_By = "admin";

                String insertStatement = "INSERT INTO countries(Country, Create_Date, Created_By, Last_Update, Last_Updated_By)"
                        + "VALUES(" +
                        "'" + Country + "'," +
                        "'" + Create_Date + "'," +
                        "'" + Created_By + "'," +
                        "'" + Last_Update + "'," +
                        "'" + Last_Updated_By + "'" +
                        ")";
                        */
        //Update Statement
        //String updateStatement = "UPDATE countries SET Country = 'Japan' WHERE Country = 'Canada'"; //Updating countries table at country column

        //Delete Statement ....... has foreign key constraint issues...
        //String deleteStatement = "DELETE FROM countries WHERE Country = 'Japan'"; //Delete from countries table where country column record equals 'japan'

        //Select Statement is ResultSet

        //Execute SQL Statements

        //statement.execute(deleteStatement);
        //statement.execute(updateStatement); //Returns false since update was executed
        //statement.execute(insertStatement); //Returns false because we are using insert statement

        //Confirms rows affected
        //        if(statement.getUpdateCount() > 0){
        //            System.out.println(statement.getUpdateCount() + " rows affected!");
        //        } else{
        //            System.out.println("No Change");
        //        };

        //Move all the sql as an event handler into the fxml controller
        //Pass conn object to statement
        //        Query.setStatement(conn); //Create statement object
        //                Statement statement = Query.getStatement(); //Get Statement reference
        //
        //                //Select all records from countries table
        //                String selectStatement = "SELECT * FROM countries"; //SQL statement
        //                statement.execute(selectStatement); //Execute statement (returns true)
        //                ResultSet myResultSet = statement.getResultSet(); //Get the result sets and assigns to reference variable myResultSet
        //
        //
        //
        //                //Forward scroll ResultSet
        //                while(myResultSet.next()){ //next() method returns true so while it equals true the loop will be active, looping through all records
        //                int countryID = myResultSet.getInt("Country_ID"); //Local variable countryID is assigned the value of getInt() method on myResultSet with the column name as a parameter.
        //                String countryName = myResultSet.getString("Country");
        //                LocalDate createDate = myResultSet.getDate("Create_Date").toLocalDate(); //Need toLocalDate() method to convert Date to LocalDate
        //                LocalTime createTime = myResultSet.getTime("Create_Date").toLocalTime(); //Need toLocalTime to convert to Local Time
        //                String createdBy = myResultSet.getString("Created_By");
        //                LocalDateTime updateDate = myResultSet.getTimestamp("Last_Update").toLocalDateTime(); //Need toLocalDateTime() method to convert. Using timestamp type
        //                //LocalTime updateTime = myResultSet.getTime("Last_Update").toLocalTime();
        //                String updatedBy = myResultSet.getString("Last_Updated_By");

        //            System.out.println("Country ID: " + countryID);
        //            System.out.println("Country Name: " + countryName);
        //            System.out.println("createDate: " + createDate + createTime);
        //            System.out.println("createdBy: " + createdBy);
        //            System.out.println("updateDate: " + updateDate);

                       // }

          *********************SQL QUERIES AND PREPARED STATEMENTS *************************
         //Establish connection before launch and assign it to the Connection reference variable named conn
                Connection conn = DBConnection.startConnection();

                //Select Statement
                String selectStatement = "SELECT * FROM countries";

                //Insert Statement
                String insertStatement = "INSERT INTO countries (Country, Create_Date, Created_By, Last_Updated_By) VALUES(?,?,?,?)"; //Question marks are placeholders to be mapped with key values in one-based index

                //Update statement
                String updateStatement = "UPDATE countries SET Country = ? WHERE Created_By = ?";

                //Delete statement
                String deleteStatement = "DELETE FROM countries WHERE country = ?";

                //Create prepared statement object for selectStatement
                Query.setPreparedStatement(conn, selectStatement);

                //Create prepared statement object for insertStatement
                //Query.setPreparedStatement(conn, insertStatement);

                //Create prepared statement object for updateStatement
                //Query.setPreparedStatement(conn, updateStatement);

                //Create prepared statement object for deleteStatement
                //Query.setPreparedStatement(conn, deleteStatement);

                //Prepared statement reference
                PreparedStatement preparedStatement = Query.getPreparedStatement();

                String Country = "Test";
                String Create_Date = "2020-03-28 00:00:00";
                String Created_By = "me";
                String Last_Updated_By = "me again";

                //Get keyboard input
        //        Scanner keyboard = new Scanner(System.in);
        //        System.out.println("Enter your country name: ");
        //        countryName = keyboard.nextLine();

                //Key-value mapping to set the prepared statement
                //preparedStatement.setString(1,Country);
                //preparedStatement.setString(2,Create_Date);
                //preparedStatement.setString(3,Created_By);
                //preparedStatement.setString(4,Last_Updated_By);

                preparedStatement.execute(); //Execute prepared statement

                ResultSet myResultSet = preparedStatement.getResultSet(); //Get the result sets and assigns to reference variable myResultSet
        //
        //
        //
        //                //Forward scroll ResultSet
                while (myResultSet.next()) { //next() method returns true so while it equals true the loop will be active, looping through all records
                    int countryID = myResultSet.getInt("Country_ID"); //Local variable countryID is assigned the value of getInt() method on myResultSet with the column name as a parameter.
                    String countryName = myResultSet.getString("Country");
                    LocalDate createDate = myResultSet.getDate("Create_Date").toLocalDate(); //Need toLocalDate() method to convert Date to LocalDate
                    LocalTime createTime = myResultSet.getTime("Create_Date").toLocalTime(); //Need toLocalTime to convert to Local Time
                    String createdBy = myResultSet.getString("Created_By");
                    LocalDateTime updateDate = myResultSet.getTimestamp("Last_Update").toLocalDateTime(); //Need toLocalDateTime() method to convert. Using timestamp type
                    //LocalTime updateTime = myResultSet.getTime("Last_Update").toLocalTime();
                    String updatedBy = myResultSet.getString("Last_Updated_By");

                    System.out.println("Country ID: " + countryID);
                    System.out.println("Country Name: " + countryName);
                    System.out.println("createDate: " + createDate + createTime);
                    System.out.println("createdBy: " + createdBy);
                    System.out.println("updateDate: " + updateDate);
                }
                    //Check rows affected
                    if (preparedStatement.getUpdateCount() > 0)
                        System.out.println("Rows affected: " + preparedStatement.getUpdateCount());
                    else System.out.println("No change!");

                    ****************** FXML DELETE CONFIRM BUTTON CODE *******************************
                        @FXML
                        private void customersDeleteButtonHandler(ActionEvent event) {
                            // Creating Alert window and dialog
                            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
                            alert.setTitle("Confirmation Dialog");
                            alert.setHeaderText("Delete Customer");
                            alert.setContentText("Are you sure you want to delete the selected customer?");

                            //Delete confirm button options
                            Optional<ButtonType> result = alert.showAndWait();
                            if (result.get() == ButtonType.OK){
                                // Select the customer
                                Customers deleteSelectedCustomer = myCustomerList.getSelectionModel().getSelectedItem();
                                //Delete the customer
                                Customers.deleteCustomer(deleteSelectedCustomer);
                                System.out.println("Customer Deleted!");
                            } else {
                                // If they click Cancel they return to the application
                            }
                        }